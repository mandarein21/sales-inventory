<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="../css/style.css" rel="stylesheet">
    <title>Products</title>
    
</head>

<body>
    <%- include('layouts/navbar', { admin: admin }); -%>

    <%- include('layouts/sidebar'); -%>


    <div class="content">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="my-1"><i class="bi bi-boxes"></i> Products</h1>
            <button class="btn btn-add-product" data-bs-toggle="modal" data-bs-target="#addProductModal">+ Add Product</button>
        </div>
        
        <!-- Divider Line -->
        <hr>
    
        <!-- Search Bar and Pagination -->
        <div class="d-flex justify-content-between align-items-center my-3">
            <!-- Search Bar -->
            <div class="search-bar me-3" style="max-width: 400px; width: 100%;">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Enter product name or category" aria-label="Product Code">
                    <button class="btn btn-primary" id="searchBtn" type="button" style="white-space: nowrap;">Search</button>
                </div>
            </div>
    
            <!-- Pagination -->
           <!-- Pagination -->
<!-- Pagination -->
<nav aria-label="Page navigation">
    <ul class="pagination mb-0">
        <li class="page-item">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>


        </div>

        <table class="table table-bordered product-table">
            <thead>
                <tr>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Category</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% products.forEach(function(product) { %>
                <tr data-id="<%= product.ProductID %>">
                    <td><%= product.ProductID %></td>
                    <td class="product-name"><%= product.ProductName %></td>
                    <td class="category">
                        <% const category = (categories || []).find(cat => cat.CategoryID === product.CategoryID); %>
                        <%= category ? category.CategoryName : 'Unknown' %>
                    </td>
                    
                                   
                    <td class="quantity"><%= product.Quantity %></td>
                    <td class="price"><%= product.Price.toFixed(2) %></td>
                    <td>
                        <button class="btn btn-warning btn-sm edit-product-btn" data-product-id="<%= product.ProductID %>" data-bs-toggle="modal" data-bs-target="#editProductModal">
                            <i class="bi bi-pencil-fill"></i>
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="confirmDeleteProduct('<%= product.ProductID %>')">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </td>
                    
                </tr>
                <% }); %>
            </tbody>
        </table>
        
        
    </div>
<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addProductForm">
                    <div class="mb-3">
                        <label for="productId" class="form-label">Product ID</label>
                        <input type="text" class="form-control" id="productId" required>
                    </div>
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" required>
                    </div>
                    <div class="mb-3">
                        <label for="categorySelect" class="form-label">Category</label>
                        <select class="form-select" id="categorySelect" required>
                            <option value="" disabled selected>Select a category</option>
                            <!-- Categories will be populated here -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="quantity" required>
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Price</label>
                        <input type="number" class="form-control" id="price" required step="0.01"> <!-- Step added for decimal input -->
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveProductBtn">Save Product</button>
            </div>
        </div>
    </div>
</div>


    <!-- Edit Product Modal -->
<!-- Edit Product Modal -->
<div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editProductForm">
                    <div class="mb-3">
                        <label for="editProductId" class="form-label">Product ID</label>
                        <input type="text" class="form-control" id="editProductId" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="editProductName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="editProductName" required>
                    </div>
                    <div class="mb-3">
                        <label for="categorySelect" class="form-label">Category</label>
                        <select id="categorySelect" class="form-control">
                            <option value="" disabled selected>Select a category</option>
                            <!-- Categories will be populated here -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="editQuantity" required>
                    </div>
                    <div class="mb-3">
                        <label for="editPrice" class="form-label">Price</label>
                        <input type="number" class="form-control" id="editPrice" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="updateProductBtn">Update Product</button>
            </div>
        </div>
    </div>
</div>



     <!-- Logout Confirmation Modal -->
     <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logoutModalLabel">Confirm Logout</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to log out?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <a href="/admin/logout" class="btn btn-danger">Yes, Logout</a> <!-- Redirect to login page -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Toggle sidebar on small screens
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('hide');
        }
     
     //add product
// Fetch Categories and Populate Select
async function fetchCategories(selectElementId, selectedCategoryId = null) {
    try {
        const response = await fetch('/admin/api/categories');
        if (!response.ok) throw new Error('Network response was not ok');
        
        const categories = await response.json();
        const categorySelect = document.getElementById(selectElementId);

        categorySelect.innerHTML = '<option value="" disabled selected>Select a category</option>';

        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.CategoryID;
            option.textContent = category.CategoryName;

            // Set the selected option if editing a product
            if (selectedCategoryId && category.CategoryID === selectedCategoryId) {
                option.selected = true;
            }

            categorySelect.appendChild(option);
        });
    } catch (error) {
        console.error('Error fetching categories:', error);
    }
}

// Event listener for opening the Add Product modal
document.getElementById('addProductModal').addEventListener('show.bs.modal', () => {
    fetchCategories('categorySelect'); // Fetch categories for the Add Product modal
});

// Adding Product
document.getElementById('saveProductBtn').addEventListener('click', async () => {
    const productId = document.getElementById('productId').value;
    const productName = document.getElementById('productName').value;
    const categoryID = Number(document.getElementById('categorySelect').value);
    const quantity = document.getElementById('quantity').value;
    const price = document.getElementById('price').value;

    const productData = {
        productId,
        productName,
        CategoryID: categoryID,
        quantity,
        price,
    };

    try {
        const response = await fetch('/add-product', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(productData),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        alert('Product added successfully!');
        location.reload();
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while adding the product.');
    }
});


//edit product
// Fetch Categories and Populate Select for Edit Product Modal
// Fetch Categories and Populate Select for Edit Product Modal
async function fetchCategoriesForEdit(selectedCategoryId = null) {
    const editCategorySelect = document.getElementById('categorySelect'); // Corrected ID

    if (!editCategorySelect) {
        console.error(`Edit category select element not found.`);
        return;
    }

    try {
        const response = await fetch('/admin/api/categories');
        if (!response.ok) throw new Error('Network response was not ok');

        const categories = await response.json();
        editCategorySelect.innerHTML = '<option value="" disabled selected>Select a category</option>';

        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.CategoryID;
            option.textContent = category.CategoryName;

            if (selectedCategoryId && category.CategoryID === selectedCategoryId) {
                option.selected = true;
            }

            editCategorySelect.appendChild(option);
        });
    } catch (error) {
        console.error('Error fetching categories:', error);
    }
}

// Load Product Details for Editing
async function loadProductDetails(productId) {
    try {
        const response = await fetch(`/admin/api/products/${productId}`);
        if (!response.ok) throw new Error('Network response was not ok');

        const product = await response.json();

        if (!product) {
            console.error('Product data is undefined.');
            return;
        }

        // Populate the form fields with product details
        document.getElementById('editProductId').value = product.ProductID ?? '';
        document.getElementById('editProductName').value = product.ProductName ?? '';
        document.getElementById('editQuantity').value = product.Quantity ?? '';
        document.getElementById('editPrice').value = product.Price ?? '';

        // Fetch categories and set the selected value after fetching
        await fetchCategoriesForEdit(product.CategoryID);
    } catch (error) {
        console.error('Error loading product details:', error);
    }
}

// Event Listener for opening the Edit Product modal
document.querySelectorAll('.edit-product-btn').forEach(button => {
    button.addEventListener('click', async function () {
        const productId = button.getAttribute('data-product-id');

        if (!productId) {
            console.error('Product ID is missing.');
            return;
        }

        // Load product details and show the modal
        await loadProductDetails(productId);
    });
});



// Event Listener for opening the Edit Product modal
document.getElementById('editProductModal').addEventListener('show.bs.modal', function (event) {
    const button = event.relatedTarget;
    const productId = button.getAttribute('data-product-id');

    if (!productId) {
        console.error('Product ID is missing.');
        return;
    }

    loadProductDetails(productId);
});




// Updating Product
document.getElementById('updateProductBtn').addEventListener('click', async () => {
    const productId = document.getElementById('editProductId').value;
    const productName = document.getElementById('editProductName').value;
    const categoryID = Number(document.getElementById('editCategorySelect').value);
    const quantity = document.getElementById('editQuantity').value;
    const price = document.getElementById('editPrice').value;

    const productData = {
        productId,
        productName,
        CategoryID: categoryID,
        quantity,
        price,
    };

    try {
        const response = await fetch(`/update-product/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(productData),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        alert('Product updated successfully!');
        location.reload();
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while updating the product.');
    }
});




// Confirm Deletion Functionality
function confirmDeleteProduct(productId) {
    if (confirm('Are you sure you want to delete this product?')) {
        deleteProduct(productId);
    }
}

async function deleteProduct(productId) {
    try {
        const response = await fetch(`/delete-product/${productId}`, { // Assuming the delete route requires the product ID
            method: 'DELETE',
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        alert('Product deleted successfully!'); // Alert for successful deletion
        location.reload(); // Reload the page to see the changes
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while deleting the product.');
    }
}





// Resetting modals
document.addEventListener('DOMContentLoaded', function() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.addEventListener('hidden.bs.modal', function () {
            // Reset the modal form fields if needed
            modal.querySelectorAll('form').forEach(form => form.reset());

            // Remove the backdrop to ensure interactions with the page
            document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
        });
    });
});



// Function to filter table rows based on input
function filterTable() {
        let searchInput = document.querySelector('.search-bar input').value.toLowerCase();
        let tableRows = document.querySelectorAll('.product-table tbody tr');

        tableRows.forEach(function (row) {
            let productName = row.querySelector('.product-name').textContent.toLowerCase();
            let category = row.querySelector('.category').textContent.toLowerCase();
            let productId = row.querySelector('td:first-child').textContent.toLowerCase(); // Product ID
            
            // Check if input is empty, show all rows if true
            if (searchInput === "") {
                row.style.display = ''; // Show all rows if input is empty
            } else {
                // Hide or show rows based on search input
                if (productName.includes(searchInput) || category.includes(searchInput) || productId.includes(searchInput)) {
                    row.style.display = ''; // Show row if it matches
                } else {
                    row.style.display = 'none'; // Hide row if it doesn't match
                }
            }
        });
    }

    // Add event listener to the search button
    document.getElementById('searchBtn').addEventListener('click', filterTable);

    // Add search functionality when user presses 'Enter' or types in the search input field
    document.querySelector('.search-bar input').addEventListener('keyup', function (event) {
        filterTable(); // Trigger filtering on each keyup event (for dynamic filtering)
    });





    </script>


</body>

</html>
